import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/user_model.dart';
import '../models/geofence_model.dart';
import '../services/auth_service.dart';
import '../services/location_service.dart';

class MainViewModel {
  final AuthService _authService = AuthService();
  final LocationService _locationService = LocationService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Get current user
  User? get currentUser => _authService.currentUser;

  // Get auth state changes stream
  Stream<User?> get authStateChanges => _authService.authStateChanges;

  // Initialize services
  Future<void> initialize() async {
    await _locationService.initialize();
  }

  // Sign in with Google
  Future<UserCredential?> signInWithGoogle() async {
    return await _authService.signInWithGoogle();
  }

  // Sign out
  Future<void> signOut() async {
    await _authService.signOut();
  }

  // Get current user data
  Stream<UserModel?> getCurrentUserData() {
    if (currentUser == null) return Stream.value(null);
    
    return _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .snapshots()
        .map((doc) => doc.exists ? UserModel.fromFirestore(doc) : null);
  }

  // Get friends list
  Stream<List<UserModel>> getFriends() {
    if (currentUser == null) return Stream.value([]);

    return _firestore
        .collection('users')
        .where('friends', arrayContains: currentUser!.uid)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => UserModel.fromFirestore(doc))
            .toList());
  }

  // Add friend
  Future<void> addFriend(String friendUid) async {
    if (currentUser == null) return;

    try {
      // Add friend to current user's friends list
      await _firestore.collection('users').doc(currentUser!.uid).update({
        'friends': FieldValue.arrayUnion([friendUid])
      });

      // Add current user to friend's friends list
      await _firestore.collection('users').doc(friendUid).update({
        'friends': FieldValue.arrayUnion([currentUser!.uid])
      });
    } catch (e) {
      print('Error adding friend: $e');
    }
  }

  // Remove friend
  Future<void> removeFriend(String friendUid) async {
    if (currentUser == null) return;

    try {
      // Remove friend from current user's friends list
      await _firestore.collection('users').doc(currentUser!.uid).update({
        'friends': FieldValue.arrayRemove([friendUid])
      });

      // Remove current user from friend's friends list
      await _firestore.collection('users').doc(friendUid).update({
        'friends': FieldValue.arrayRemove([currentUser!.uid])
      });
    } catch (e) {
      print('Error removing friend: $e');
    }
  }

  // Update user profile
  Future<void> updateProfile({
    String? displayName,
    String? photoURL,
    UserRole? role,
    bool? isTrackingEnabled,
  }) async {
    if (currentUser == null) return;

    await _authService.updateUserProfile(
      uid: currentUser!.uid,
      displayName: displayName,
      photoURL: photoURL,
      role: role,
      isTrackingEnabled: isTrackingEnabled,
    );
  }

  // Update user location
  Future<void> updateLocation() async {
    if (currentUser == null) return;

    final position = await _locationService.getCurrentLocation();
    if (position != null) {
      await _locationService.updateUserLocation(currentUser!.uid, position);
    }
  }

  // Create geofence
  Future<void> createGeofence({
    required String name,
    required String description,
    required GeoPoint center,
    required double radius,
    required List<String> notifyUsers,
  }) async {
    if (currentUser == null) return;

    final geofence = GeofenceModel(
      id: '', // Will be generated by Firestore
      name: name,
      description: description,
      center: center,
      radius: radius,
      userId: currentUser!.uid,
      notifyUsers: notifyUsers,
      createdAt: DateTime.now(),
    );

    await _locationService.createGeofence(geofence);
  }

  // Get user's geofences
  Stream<List<GeofenceModel>> getUserGeofences() {
    if (currentUser == null) return Stream.value([]);
    return _locationService.getUserGeofences(currentUser!.uid);
  }

  // Update geofence
  Future<void> updateGeofence(GeofenceModel geofence) async {
    await _locationService.updateGeofence(geofence);
  }

  // Delete geofence
  Future<void> deleteGeofence(String geofenceId) async {
    await _locationService.deleteGeofence(geofenceId);
  }
} 